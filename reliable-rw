#!/usr/bin/python


# The MIT License (MIT)
#
# Copyright (c) 2013-2014 Stacey Ell
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


"""
Pattern:
    magic number
    while (buf = yield_piece()) > 0 {
        a 32 bit integer, network byte order specifying the piece size `n'
	    the piece: n bytes of data (read from the input stream)
	    the sha256 up until this point.
    }
    end magic number generated by adding the magic number to the hash

"""
from contextlib import contextmanager
import sys, os, hashlib, struct, shutil, subprocess
piece_size = 4 * 1024**2 # 4MB
magic = b'reliable-encap'

class IntegrityError(ValueError):
    pass


def yield_pieces(subprocess):  # input_file):
    hasher = hashlib.sha256()
    yield magic
    while True:
        buf = subprocess.stdout.read(piece_size)
        hasher.update(buf)
        yield struct.pack('!I', len(buf))
        yield buf
        yield hasher.digest()
        if not buf:
            break
    if subprocess.wait() == 0:
        hasher.update(magic)
        yield hasher.digest()


def yield_input(input_file):
    hasher = hashlib.sha256()
    if not input_file.read(len(magic)) == magic:
        raise IntegrityError("Magic number missing")
    while True:
        length, = struct.unpack('!I', input_file.read(struct.calcsize('!I')))
        buf = input_file.read(length)
        hasher.update(buf)
        cur_hash = input_file.read(hasher.digest_size)
        if not hasher.digest() == cur_hash:
            raise IntegrityError("Inner Hash Mismatch")
        if not buf:
            break
        yield buf
    hasher.update(magic)
    cur_hash = input_file.read(hasher.digest_size)
    if not hasher.digest() == cur_hash:
        raise IntegrityError("Terminating Hash Mismatch")



@contextmanager
def transactional_write(filename):
    temp_file = '%s.tmp' % filename
    with open(temp_file, 'w') as fh:
        try:
            yield fh
            shutil.move(temp_file, filename)
        except:
            os.unlink(temp_file)
            raise


def reliable_encap_main(argv):
    child = subprocess.Popen(argv[1:], stdout=subprocess.PIPE)
    for piece in yield_pieces(child):
        sys.stdout.write(piece)


def reliable_write_main(argv):
    with transactional_write(sys.argv[1]) as f:
        for orig_piece in yield_input(sys.stdin):
            f.write(orig_piece)


def main(argv):
    cmd = os.path.basename(sys.argv[0])
    if cmd == 'reliable-encap':
        reliable_encap_main(argv)
    elif cmd == 'reliable-write':
        reliable_write_main(argv)
    else:
        raise Exception("Invalid Invocation: %s" % sys.argv[0])


if __name__ == '__main__':
    main(sys.argv)

